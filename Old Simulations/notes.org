#+TITLE: Key to Simulation Datasets

* rw_2014-12-19
__version__ = '0.3'

numPaths = 50000 # Number of paths per pair of walk parameters
pathLength =  16000 * (random(numPaths) - 0.5) + 25000 # bp in walk
linDensity = arange(10, 110, 20)  # bp / nm
persisLength = arange(10, 210, 20) # nm
segConvFactor = 25 / min(persisLength) # segments / min persisLen
nameDB = 'rw_' + dateStr

tic = time.clock()
myCollector = WLCCollector(numPaths,

			   pathLength,
			   linDensity,
			   persisLength,
			   segConvFactor,
			   nameDB)
toc = time.clock()
print('Total processing time: %f' % (toc - tic))

* rw_2014-12-22
__version__ = '0.4'

This code was used to test the new algorithm, which randomly displaces
the localizations according to a Gaussian distribution.

import matplotlib.pyplot as plt
numPaths = 1000 # Number of paths per pair of walk parameters
pathLength =  16000 * (random(numPaths) - 0.5) + 25000 # bp in walk
linDensity = arange(10, 110, 20)  # bp / nm
persisLength = arange(10, 210, 20) # nm
#linDensity = array([100])
#persisLength = array([100])
segConvFactor = 25 / min(persisLength) # segments / min persisLen
nameDB = 'rw_' + dateStr
locPrecision = 10 # nm

tic = time.clock()
myCollector = WLCCollector(numPaths,
			   pathLength,
			   linDensity,
			   persisLength,
			   segConvFactor,
			   nameDB,
			   locPrecision)
toc = time.clock()
print('Total processing time: %f' % (toc - tic))
    
* rw_2015-01-07
__version__ = '0.5'

from numpy import ones, append
kwargs = {}
kwargs['numPaths'] = 100000 # Number of paths per pair of walk parameters
kwargs['pathLength'] =  13900 * (random(kwargs['numPaths']) - 0.5) + 26250 # bp in walk
#kwargs['pathLength'] = 25000 * ones(kwargs['numPaths'])
kwargs['linDensity'] = arange(20, 70, 10)  # bp / nm
kwargs['persisLength'] = arange(20, 110, 10) # nm
#linDensity = array([100])
#persisLength = array([100])
kwargs['segConvFactor'] = 25 / 10 # segments / min persisLen
kwargs['nameDB'] = 'rw_' + dateStr
kwargs['locPrecision'] = 2.12 # nm

tic = time.time()
myCollector = WLCCollector(**kwargs)
toc = time.time()
print('Total processing time: %f' % (toc - tic))
